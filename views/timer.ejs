<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Countdown Timer</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
<link href="/css_timer.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body, html {
            height: 100vh;
            width: 100vw;
            overflow: hidden;
            background-color: <%= background %>;
            <% if (transparent_bg) { %>background: transparent;<% } %>
            font-family: 'Share Tech Mono', 'Courier New', monospace;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .timer-container {
            text-align: center;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            position: relative;
        }
        
        .timer-container.position-top-left {
            justify-content: flex-start;
            align-items: flex-start;
            padding: 1vh 1vw;
        }

        .timer-container.position-top-right {
            justify-content: flex-start;
            align-items: flex-end;
            padding: 1vh 1vw;
        }

        .timer-container.position-bottom-left {
            justify-content: flex-end;
            align-items: flex-start;
            padding: 1vh 1vw;
        }

        .timer-container.position-bottom-right {
            justify-content: flex-end;
            align-items: flex-end;
            padding: 1vh 1vw;
        }
        
        .timer-container.position-center {
            align-items: center;
            justify-content: center;
        }
        
        .timer-display {
            font-size: min(<%= (20 * font_size / 100) %>vw, <%= (15 * font_size / 100) %>vh);
            font-weight: bold;
            color: <%= font_color %>;
            <% if (show_shadow) { %>
                text-shadow: 0 0 <%= (20 * font_size / 100) %>px currentColor;
            <% } else { %>text-shadow: none;<% } %>
            letter-spacing: 0.1em;
            transition: color 0.3s ease, text-shadow 0.3s ease, opacity 0.1s ease, transform 0.1s ease;
            user-select: none;
            line-height: 1;
            will-change: opacity, transform;
        }

        .timer-display.counting-up {
            color: <%= count_up_color %> !important;
            <% if (show_shadow) { %>
                text-shadow: 0 0 <%= (20 * font_size / 100) %>px <%= count_up_color %>;
            <% } else { %>text-shadow: none;<% } %>
        }
        
        .timer-display.warning1 {
            color: <%= warning_color_1 %> !important;
            <% if (show_shadow) { %>
                text-shadow: 0 0 <%= (30 * font_size / 100) %>px <%= warning_color_1 %>;
            <% } else { %>text-shadow: none;<% } %>
        }

        .timer-display.warning2 {
            color: <%= warning_color_2 %> !important;
            <% if (show_shadow) { %>
                text-shadow: 0 0 <%= (30 * font_size / 100) %>px <%= warning_color_2 %>;
            <% } else { %>text-shadow: none;<% } %>
        }
        
        .timer-display.flashing {
            -webkit-animation: flash 1s ease-in-out infinite;
            -moz-animation: flash 1s ease-in-out infinite;
            -o-animation: flash 1s ease-in-out infinite;
            animation: flash 1s ease-in-out infinite;
            animation-fill-mode: forwards;
            -webkit-animation-fill-mode: forwards;
        }

        @-webkit-keyframes flash {
            0% {
                opacity: 1;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (40 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
            50% {
                opacity: 0.2;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (10 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
            100% {
                opacity: 1;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (40 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
        }

        @keyframes flash {
            0% {
                opacity: 1;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (40 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
            50% {
                opacity: 0.2;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (10 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
            100% {
                opacity: 1;
                color: <%= warning_color_2 %>;
                <% if (show_shadow) { %>
                    text-shadow: 0 0 <%= (40 * font_size / 100) %>px <%= warning_color_2 %>;
                <% } else { %>text-shadow: none;<% } %>
            }
        }
        
        .separator {
            display: inline-block;
            opacity: 1;
            transition: opacity 0.3s ease;
            -webkit-transition: opacity 0.3s ease;
            -moz-transition: opacity 0.3s ease;
        }

        .separator.blink {
            -webkit-animation: blink 1s infinite;
            -moz-animation: blink 1s infinite;
            -o-animation: blink 1s infinite;
            animation: blink 1s infinite;
        }

        @-webkit-keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }
        
        .connection-status {
            position: absolute;
            top: 20px;
            right: 20px;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: bold;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            transition: all 0.3s ease;
            opacity: 0;
        }
        
        .position-top-left .connection-status {
            top: auto;
            right: auto;
            bottom: -50px;
            left: 0;
        }
        
        .position-top-right .connection-status {
            top: auto;
            right: 0;
            bottom: -50px;
            left: auto;
        }
        
        .position-bottom-left .connection-status {
            bottom: auto;
            right: auto;
            top: -50px;
            left: 0;
        }
        
        .position-bottom-right .connection-status {
            bottom: auto;
            right: 0;
            top: -50px;
            left: auto;
        }
        
        .connection-status.show {
            opacity: 1;
        }
        
        .connection-status.offline {
            background: rgba(255, 68, 68, 0.9);
            color: white;
        }
        
        .connection-status.reconnected {
            background: rgba(40, 167, 69, 0.9);
            color: white;
        }
        
        @media (max-width: 600px) {
            .timer-display {
                font-size: min(<%= (18 * font_size / 100) %>vw, <%= (12 * font_size / 100) %>vh);
            }

            /* Adjust corner positioning for mobile */
            .timer-container.position-top-left,
            .timer-container.position-top-right,
            .timer-container.position-bottom-left,
            .timer-container.position-bottom-right {
                padding: 0.5vh 0.5vw;
            }

            .connection-status {
                top: 10px;
                right: 10px;
                font-size: 0.7em;
                padding: 6px 12px;
            }
        }
        
        @media (max-height: 400px) {
            .timer-display {
                font-size: min(<%= (15 * font_size / 100) %>vw, <%= (20 * font_size / 100) %>vh);
            }
        }
    </style>
</head>
<body>
    <div class="timer-container position-<%= position %>">
        <div class="timer-display" id="timerDisplay">00:00:00</div>
        <div class="connection-status" id="connectionStatus">Offline</div>
    </div>

    <script>
        const timerDisplay = document.getElementById('timerDisplay');
        const connectionStatus = document.getElementById('connectionStatus');
        const showSeconds = <%- JSON.stringify(show_seconds) %>;
        const hideHourAuto = <%- JSON.stringify(hide_hour_auto) %>;
        const hideSecondsOverHour = <%- JSON.stringify(hide_seconds_over_hour) %>;
        const stopAtZero = <%- JSON.stringify(stop_at_zero) %>;
        const flashIndefinitely = <%- JSON.stringify(flash_indefinitely) %>;
        
        // Timer state for offline operation
        let timerState = {
            running: false,
            paused: false,
            remaining: 0,
            finished: false,
            localStartTime: null,
            localRemaining: 0,
            lastServerSync: null,
            pendingControlAction: null, // Track pending control actions for responsiveness
            countingUp: !stopAtZero,
            isTargetMode: false,
            targetTime: null
        };
        
        let isOnline = true;
        let consecutiveErrors = 0;
        let flashingTimeout = null;
        let isFlashing = false;
        let reconnectNotificationTimeout = null;
        
        function formatTime(totalSeconds) {
            const isNegative = totalSeconds < 0;
            const absSeconds = Math.abs(totalSeconds);
            const hours = Math.floor(absSeconds / 3600);
            const minutes = Math.floor((absSeconds % 3600) / 60);
            const seconds = Math.floor(absSeconds % 60);

            let timeString = '';
            const prefix = isNegative ? '+' : '';

            // When both hideSecondsOverHour and hideHourAuto are enabled,
            // we need special logic to prevent character count jumping
            if (hideSecondsOverHour && hideHourAuto) {
                // Special mode: maintain consistent character count
                if (absSeconds > 3600) {
                    // Above 1 hour: show H:MM format (no seconds)
                    const shouldShowSeconds = false;
                    const shouldShowHours = true;

                    timeString = prefix + String(hours).padStart(2, '0') + ':' + String(minutes).padStart(2, '0');
                } else {
                    // At or below 1 hour: show MM:SS format (no hours)
                    const shouldShowSeconds = showSeconds;
                    const shouldShowHours = false;

                    timeString = prefix + String(minutes).padStart(2, '0');
                    if (shouldShowSeconds) {
                        timeString += ':' + String(seconds).padStart(2, '0');
                    }
                }

                return timeString;
            }

            // Normal logic for other cases
            const shouldShowSeconds = showSeconds && !(hideSecondsOverHour && absSeconds > 3600);
            let shouldShowHours;

            if (!hideHourAuto) {
                shouldShowHours = true;
            } else {
                shouldShowHours = hours > 0;
            }

            if (shouldShowHours) {
                timeString = prefix + String(hours).padStart(2, '0') + ':';
            } else {
                timeString = prefix;
            }

            timeString += String(minutes).padStart(2, '0');

            if (shouldShowSeconds) {
                timeString += ':' + String(seconds).padStart(2, '0');
            }

            return timeString;
        }
        
        function showConnectionStatus(message, className, duration = 3000) {
            connectionStatus.textContent = message;
            connectionStatus.className = `connection-status show ${className}`;
            
            setTimeout(() => {
                connectionStatus.classList.remove('show');
            }, duration);
        }
        
        function updateLocalTimer() {
            if (timerState.running) {
                let newRemaining;

                if (timerState.isTargetMode && timerState.targetTime) {
                    // Calculate remaining time to target directly
                    const now = Date.now();
                    const target = new Date(timerState.targetTime).getTime();
                    newRemaining = (target - now) / 1000;
                } else if (timerState.localStartTime) {
                    // Duration mode - calculate from elapsed time
                    const elapsed = (Date.now() - timerState.localStartTime) / 1000;
                    newRemaining = timerState.remaining - elapsed;
                }

                // Keep fractional seconds for smooth display
                if (newRemaining >= 0 || timerState.countingUp) {
                    timerState.localRemaining = newRemaining;

                    // Mark as finished when countdown reaches zero (but keep running if counting up)
                    if (newRemaining <= 0 && !timerState.finished) {
                        timerState.finished = true;
                        if (!timerState.countingUp) {
                            timerState.running = false;
                            startFlashing();
                        } else {
                            startFlashing(); // Flash when crossing zero
                        }
                    }
                } else {
                    timerState.localRemaining = 0;
                    // Check if timer finished locally (only if not counting up)
                    if (!timerState.finished && !timerState.countingUp) {
                        timerState.finished = true;
                        timerState.running = false;
                        startFlashing();
                    }
                }
            }
        }
        
        function updateDisplay() {
            updateLocalTimer();

            // Always use local calculated time for smooth countdown
            let displayTime = timerState.running ? timerState.localRemaining : timerState.remaining;

            // When counting up, display negative values; when not, clamp to 0
            if (!timerState.countingUp) {
                displayTime = Math.max(0, displayTime);
            }

            // Force display to 00:00:00 when timer is finished and NOT counting up
            if ((timerState.finished || displayTime <= 0) && !timerState.countingUp) {
                displayTime = 0;
            }

            // Use fractional seconds for smooth countdown, but round for display
            const displayTimeFormatted = formatTime(Math.floor(displayTime));

            // Smooth interpolation within seconds using CSS transforms
            const absFractionalPart = Math.abs(displayTime) - Math.floor(Math.abs(displayTime));
            const smoothness = 1 - absFractionalPart; // Creates smooth transition effect

            // Only update text if the displayed second has changed to avoid flicker
            if (timerDisplay.textContent !== displayTimeFormatted) {
                timerDisplay.textContent = displayTimeFormatted;
            }

            // Apply subtle visual feedback for smooth countdown feeling
            if (timerState.running && (!timerState.finished || timerState.countingUp)) {
                const opacity = 0.9 + (smoothness * 0.1); // Subtle opacity pulse
                timerDisplay.style.opacity = opacity;
            } else {
                timerDisplay.style.opacity = '1';
            }

            // Handle color changes and flashing
            if (displayTime < 0) {
                // Counting up after zero - remove warnings, use count-up color
                stopFlashing();
                timerDisplay.classList.remove('warning1', 'warning2');
                timerDisplay.classList.add('counting-up');
            } else if ((timerState.finished || displayTime <= 0) && !timerState.countingUp) {
                if (!isFlashing) {
                    // Ensure we're in warning2 state before flashing
                    timerDisplay.classList.remove('warning1');
                    timerDisplay.classList.add('warning2');
                    startFlashing();
                }
            } else if (displayTime <= 60 && displayTime > 0) {
                // Final warning state (1 minute) - intense warning color but no flashing
                stopFlashing();
                timerDisplay.classList.remove('warning1', 'counting-up');
                timerDisplay.classList.add('warning2');
            } else if (displayTime <= 300 && displayTime > 0) {
                // First warning state (5 minutes) - warning color but no flashing
                stopFlashing();
                timerDisplay.classList.remove('warning2', 'counting-up');
                timerDisplay.classList.add('warning1');
            } else {
                // Normal state - explicitly remove all warning classes
                stopFlashing();
                timerDisplay.classList.remove('warning1', 'warning2', 'counting-up');
            }

            // Add blinking separators when running
            if (timerState.running) {
                const separators = timerDisplay.textContent.match(/:/g);
                if (separators) {
                    let displayText = timerDisplay.textContent;
                    displayText = displayText.replace(/:/g, '<span class="separator blink">:</span>');
                    timerDisplay.innerHTML = displayText;
                }
            }
        }
        
        function syncWithServer(serverData) {
            const wasOffline = !isOnline;
            const clientTime = Date.now();

            // Calculate network latency compensation
            const networkLatency = serverData.serverTime ? (clientTime - serverData.serverTime) / 2 : 0;

            // Update timer state from server
            const oldRunning = timerState.running;
            const oldRemaining = timerState.remaining;
            const oldFinished = timerState.finished;

            // Adjust server remaining time for network latency if timer is running
            let adjustedRemaining = serverData.remaining;
            if (serverData.running && networkLatency > 0) {
                adjustedRemaining = Math.max(0, serverData.remaining - (networkLatency / 1000));
            }

            // Smooth sync: only update if there's a significant difference or state change
            const timeDifference = Math.abs(adjustedRemaining - timerState.remaining);
            const shouldHardSync = !oldRunning !== !serverData.running ||
                                   !oldFinished !== !serverData.finished ||
                                   timeDifference > 1.5 || // Reduced threshold for better accuracy
                                   timerState.pendingControlAction; // Force sync after control actions

            timerState.running = serverData.running;
            timerState.paused = serverData.paused;
            timerState.finished = serverData.finished;
            // Don't sync countingUp from server - use client's URL parameter preference
            // timerState.countingUp is set from stopAtZero URL parameter and should not change
            timerState.isTargetMode = serverData.isTargetMode !== undefined ? serverData.isTargetMode : timerState.isTargetMode;
            timerState.targetTime = serverData.targetTime !== undefined ? serverData.targetTime : timerState.targetTime;
            timerState.lastServerSync = clientTime;
            timerState.pendingControlAction = null; // Clear pending action

            // Sync logic
            if (!oldRunning && serverData.running) {
                // Timer just started, initialize local timer
                timerState.remaining = adjustedRemaining;
                timerState.localRemaining = adjustedRemaining;
                timerState.localStartTime = clientTime;
            } else if (serverData.running) {
                // Timer running, use gradual sync to prevent any jumps
                const currentLocal = timerState.localRemaining;
                const drift = adjustedRemaining - currentLocal; // Can be positive or negative
                const driftMagnitude = Math.abs(drift);

                // Adjust correction speed based on drift size
                // With 5-second polling, spread correction over ~10 seconds (2 syncs)
                let correctionSpeed;
                if (driftMagnitude < 0.5) {
                    correctionSpeed = 0.1; // Very slow correction for tiny drift
                } else if (driftMagnitude < 2) {
                    correctionSpeed = 0.3; // Medium correction (corrects over ~2 syncs = 10s)
                } else {
                    correctionSpeed = 0.4; // Faster correction for large drift (corrects over ~2 syncs = 10s)
                }

                // Apply correction without resetting start time
                const correction = drift * correctionSpeed;
                timerState.remaining += correction;
            } else {
                // Not running, use server data directly
                timerState.remaining = adjustedRemaining;
                timerState.localRemaining = adjustedRemaining;
                timerState.localStartTime = null;
            }

            if (wasOffline) {
                isOnline = true;
                consecutiveErrors = 0;
                showConnectionStatus('Reconnected', 'reconnected', 2000);
            }
        }
        
        function updateTimer() {
            fetch('/api/status', {
                headers: {
                    'X-Client-Type': 'timer-display'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    syncWithServer(data);
                    consecutiveErrors = 0;
                })
                .catch(error => {
                    consecutiveErrors++;
                    
                    // Consider offline after 3 consecutive errors
                    if (consecutiveErrors >= 3 && isOnline) {
                        isOnline = false;
                        showConnectionStatus('Offline - Running Locally', 'offline', 80);
                        //console.warn('Lost connection to server, running timer locally');
                    }
                    
                    //console.error('Error fetching timer status:', error);
                });
        }
        
        function startFlashing() {
            if (isFlashing) return;

            isFlashing = true;
            timerDisplay.classList.add('flashing');
            // Keep warning2 class for proper color during flashing
            timerDisplay.classList.remove('warning1');
            timerDisplay.classList.add('warning2');

            if (!flashIndefinitely) {
                // Stop flashing after 10 seconds if flash-indefinitely is false
                flashingTimeout = setTimeout(() => {
                    stopFlashing();
                }, 10000); // 10 seconds = 10 animation cycles (1s each)
            }
            // Otherwise flash indefinitely - will flash until timer is reset or restarted
        }

        function stopFlashing() {
            if (!isFlashing) return;

            isFlashing = false;

            // Clear the auto-stop timeout if it exists
            if (flashingTimeout) {
                clearTimeout(flashingTimeout);
                flashingTimeout = null;
            }

            // Calculate how far into current animation cycle we are
            const style = window.getComputedStyle(timerDisplay);
            const animationDuration = parseFloat(style.animationDuration || style.webkitAnimationDuration || '1') * 1000;

            // Use a simpler, more compatible approach: just wait for next cycle
            // This works across all browsers without relying on animation events
            const removeFlashing = () => {
                timerDisplay.classList.remove('flashing');
                // Force a reflow to ensure the animation stops cleanly
                void timerDisplay.offsetWidth;
                // Reset opacity to ensure clean state
                timerDisplay.style.opacity = '';
            };

            // Cross-browser animation event listener
            let animationEventFired = false;
            const handleAnimationIteration = () => {
                if (!animationEventFired) {
                    animationEventFired = true;
                    removeFlashing();
                    // Remove all possible event listeners
                    timerDisplay.removeEventListener('animationiteration', handleAnimationIteration);
                    timerDisplay.removeEventListener('webkitAnimationIteration', handleAnimationIteration);
                    timerDisplay.removeEventListener('oanimationiteration', handleAnimationIteration);
                    timerDisplay.removeEventListener('MSAnimationIteration', handleAnimationIteration);
                }
            };

            // Add listeners for all browser variants
            timerDisplay.addEventListener('animationiteration', handleAnimationIteration, { once: true });
            timerDisplay.addEventListener('webkitAnimationIteration', handleAnimationIteration, { once: true });
            timerDisplay.addEventListener('oanimationiteration', handleAnimationIteration, { once: true });
            timerDisplay.addEventListener('MSAnimationIteration', handleAnimationIteration, { once: true });

            // Reliable fallback: remove after max 1 animation cycle + small buffer
            setTimeout(() => {
                if (!animationEventFired) {
                    removeFlashing();
                }
            }, animationDuration + 50);
        }
        
        // Update from server every .5 second
        setInterval(updateTimer, 500);

        // Update display every .5 second
        setInterval(updateDisplay, 500);

        // Initial update
        updateTimer();
        updateDisplay();

        // Handle page visibility changes to resync when tab becomes active
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                // Page became visible, force a server sync
                updateTimer();
            }
        });
        
        // Handle online/offline events
        window.addEventListener('online', () => {
            //console.log('Network connection restored');
            updateTimer();
        });

        window.addEventListener('offline', () => {
            //console.log('Network connection lost');
            if (isOnline) {
                isOnline = false;
                showConnectionStatus('Network Offline - Running Locally', 'offline', 5000);
            }
        });

        // Add immediate response capability for external control commands
        // This function can be called by other parts of the application for instant feedback
        window.timerControls = {
            start: function(hours = 0, minutes = 0, seconds = 0) {
                // Immediate local response
                const totalSeconds = hours * 3600 + minutes * 60 + seconds;
                timerState.running = true;
                timerState.paused = false;
                timerState.remaining = totalSeconds;
                timerState.localRemaining = totalSeconds;
                timerState.finished = false;
                timerState.localStartTime = Date.now();
                timerState.pendingControlAction = 'start';
                updateDisplay();

                // Force immediate server sync
                setTimeout(updateTimer, 50);
            },

            pause: function() {
                // Immediate local response
                timerState.running = false;
                timerState.paused = true;
                timerState.pendingControlAction = 'pause';
                updateDisplay();

                // Force immediate server sync
                setTimeout(updateTimer, 50);
            },

            reset: function() {
                // Immediate local response
                timerState.running = false;
                timerState.paused = false;
                timerState.remaining = 0;
                timerState.localRemaining = 0;
                timerState.finished = false;
                timerState.localStartTime = null;
                timerState.pendingControlAction = 'reset';
                stopFlashing();
                updateDisplay();

                // Force immediate server sync
                setTimeout(updateTimer, 50);
            }
        };

        // Debug info (remove in production)
        //console.log('Timer display initialized');
        //console.log('Show seconds:', showSeconds);
        //console.log('Hide hour auto:', hideHourAuto);
    </script>
</body>
</html>