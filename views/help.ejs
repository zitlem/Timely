<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Timer Help & Documentation</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <style>
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 300;
            font-display: swap;
            src: url('/static/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa2JL7SUc.woff2') format('woff2');
        }
        
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 400;
            font-display: swap;
            src: url('/static/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa0ZL7SUc.woff2') format('woff2');
        }
        
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 500;
            font-display: swap;
            src: url('/static/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa2pL7SUc.woff2') format('woff2');
        }
        
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 600;
            font-display: swap;
            src: url('/static/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa1pL7SUc.woff2') format('woff2');
        }
        
        @font-face {
            font-family: 'Inter';
            font-style: normal;
            font-weight: 700;
            font-display: swap;
            src: url('/static/UcC73FwrK3iLTeHuS_nVMrMxCp50SjIa1ZL7.woff2') format('woff2');
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-color: #1f2937;
            --light-color: #f8fafc;
            --border-color: #e2e8f0;
            --code-bg: #f1f5f9;
            --border-radius: 12px;
            --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            min-height: 100vh;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(20px);
            border-radius: var(--border-radius);
            padding: 40px;
            box-shadow: var(--shadow);
        }
        
        h1 {
            color: var(--dark-color);
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-align: center;
        }
        
        .subtitle {
            text-align: center;
            color: #64748b;
            font-size: 1.1rem;
            margin-bottom: 40px;
        }
        
        .nav-tabs {
            display: flex;
            border-bottom: 2px solid var(--border-color);
            margin-bottom: 30px;
            overflow-x: auto;
        }
        
        .nav-tab {
            padding: 12px 20px;
            background: none;
            border: none;
            font-size: 1rem;
            font-weight: 600;
            color: #64748b;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            border-bottom: 3px solid transparent;
        }
        
        .nav-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        h2 {
            color: var(--dark-color);
            font-size: 1.8rem;
            font-weight: 600;
            margin: 30px 0 15px 0;
        }
        
        h3 {
            color: var(--dark-color);
            font-size: 1.3rem;
            font-weight: 600;
            margin: 25px 0 10px 0;
        }
        
        h4 {
            color: var(--dark-color);
            font-size: 1.1rem;
            font-weight: 600;
            margin: 20px 0 10px 0;
        }
        
        p {
            color: #4b5563;
            margin-bottom: 15px;
        }
        
        .code-block {
            background: var(--code-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            margin: 15px 0;
            overflow-x: auto;
            position: relative;
            white-space: pre-wrap;
        }
        
        .inline-code {
            background: var(--code-bg);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }
        
        .parameter-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .parameter-table th,
        .parameter-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }
        
        .parameter-table th {
            background: var(--code-bg);
            font-weight: 600;
            color: var(--dark-color);
        }
        
        .parameter-table tr:last-child td {
            border-bottom: none;
        }
        
        .url-builder {
            background: var(--light-color);
            border: 1px solid var(--border-color);
            border-radius: var(--border-radius);
            padding: 25px;
            margin: 20px 0;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 8px;
        }
        
        .form-group input,
        .form-group select {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-top: 5px;
        }
        
        .checkbox-group input[type="checkbox"] {
            width: auto;
        }
        
        .color-input-group {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .color-input-group input[type="color"] {
            width: 60px;
            height: 40px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
        
        .generated-url {
            background: white;
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            word-break: break-all;
            position: relative;
        }
        
        .copy-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background 0.3s ease;
        }
        
        .copy-button:hover {
            background: var(--secondary-color);
        }
        
        .copy-api-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background 0.3s ease;
            z-index: 10;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .copy-api-button:hover {
            background: var(--secondary-color);
        }
        
        .api-example {
            display: block;
            white-space: nowrap;
            padding-right: 60px;
            overflow-x: auto;
        }
        
        .preview-button {
            background: var(--success-color);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.3s ease;
            margin-top: 10px;
        }
        
        .preview-button:hover {
            background: #059669;
        }
        
        .quick-links {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .quick-link {
            display: block;
            padding: 15px;
            background: white;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            text-decoration: none;
            color: var(--dark-color);
            transition: all 0.3s ease;
            text-align: center;
            font-weight: 500;
        }
        
        .quick-link:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .section {
            margin-bottom: 40px;
        }
        
        ul {
            color: #4b5563;
            margin-left: 20px;
            margin-bottom: 15px;
        }
        
        li {
            margin-bottom: 5px;
        }
        
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid;
        }
        
        .alert-info {
            background: #eff6ff;
            border-color: var(--primary-color);
            color: #1e40af;
        }
        
        .alert-warning {
            background: #fffbeb;
            border-color: var(--warning-color);
            color: #92400e;
        }
        
        .endpoint-section {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        
        .endpoint-title {
            color: var(--primary-color);
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 10px;
            font-family: 'Courier New', monospace;
        }
        
        .method-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            margin-right: 10px;
        }
        
        .method-get {
            background: #10b981;
            color: white;
        }
        
        .method-post {
            background: #3b82f6;
            color: white;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                margin: 10px;
            }
            
            h1 {
                font-size: 2rem;
            }
            
            .nav-tabs {
                flex-wrap: wrap;
            }
            
            .nav-tab {
                flex: 1;
                min-width: 120px;
            }
            
            .color-input-group {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Timer Documentation</h1>
        <p class="subtitle">Complete guide to using the countdown timer with customization options</p>
        
        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('overview')">Overview</button>
            <button class="nav-tab" onclick="showTab('customization')">Customization</button>
            <button class="nav-tab" onclick="showTab('builder')">URL Builder</button>
            <button class="nav-tab" onclick="showTab('api')">API Reference</button>
            <button class="nav-tab" onclick="showTab('setup')">Setup Guide</button>
        </div>
        
        <!-- Overview Tab -->
        <div id="overview" class="tab-content active">
            <div class="section">
                <h2>Quick Start</h2>
                <p>The timer application consists of two main interfaces:</p>
                
                <div class="quick-links">
                    <a href="/" class="quick-link" target="_blank">
                        Timer Display<br>
                        <small>Full-screen countdown view</small>
                    </a>
                    <a href="/control" class="quick-link" target="_blank">
                        Control Panel<br>
                        <small>Start, pause, and reset timer</small>
                    </a>
                </div>
                
                <h3>Features</h3>
                <ul>
                    <li><strong>Full-screen display</strong> - Perfect for presentations and public viewing</li>
                    <li><strong>Responsive design</strong> - Works on all screen sizes from mobile to large displays</li>
                    <li><strong>Offline resilience</strong> - Continues running even if connection is lost</li>
                    <li><strong>Visual alerts</strong> - Warning colors and flashing when time expires</li>
                    <li><strong>Access control</strong> - IP whitelisting for timer controls</li>
                    <li><strong>Customizable appearance</strong> - Colors, fonts, and display options</li>
                    <li><strong>Flexible positioning</strong> - Place timer in any corner or center of screen</li>
                </ul>
                
                <div class="alert alert-info">
                    <strong>Tip:</strong> Anyone can view the timer display, but only whitelisted IPs can control it (start/pause/reset).
                </div>
            </div>
        </div>
        
        <!-- Customization Tab -->
        <div id="customization" class="tab-content">
            <div class="section">
                <h2>Display Customization</h2>
                <p>Customize the timer appearance using URL parameters:</p>
                
                <table class="parameter-table">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                            <th>Default</th>
                            <th>Example Values</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><code>background</code></td>
                            <td>Background color (hex)</td>
                            <td>#000000</td>
                            <td>#000000, #1a1a1a, #2d3748</td>
                        </tr>
                        <tr>
                            <td><code>transparent-bg</code></td>
                            <td>Enable transparent background</td>
                            <td>false</td>
                            <td>true, false</td>
                        </tr>
                        <tr>
                            <td><code>font-color</code></td>
                            <td>Text color (hex)</td>
                            <td>#00ff00</td>
                            <td>#ffffff, #00ff00, #ff6b6b</td>
                        </tr>
                        <tr>
                            <td><code>warning-color-1</code></td>
                            <td>Warning color for last 5 minutes (hex)</td>
                            <td>#ff8800</td>
                            <td>#ff8800, #ffaa00, #ffd700</td>
                        </tr>
                        <tr>
                            <td><code>warning-color-2</code></td>
                            <td>Warning color for last minute (hex)</td>
                            <td>#ff4444</td>
                            <td>#ff0000, #ff4444, #cc0000</td>
                        </tr>
                        <tr>
                            <td><code>show-seconds</code></td>
                            <td>Display seconds</td>
                            <td>true</td>
                            <td>true, false</td>
                        </tr>
                        <tr>
                            <td><code>hide-hour-auto</code></td>
                            <td>Auto-hide hours when zero</td>
                            <td>off</td>
                            <td>on, off</td>
                        </tr>
                        <tr>
                            <td><code>hide-seconds-over-hour</code></td>
                            <td>Hide seconds when timer > 1 hour</td>
                            <td>false</td>
                            <td>true, false</td>
                        </tr>
                        <tr>
                            <td><code>position</code></td>
                            <td>Timer display position</td>
                            <td>center</td>
                            <td>center, top-left, top-right, bottom-left, bottom-right</td>
                        </tr>
                        <tr>
                            <td><code>font-size</code></td>
                            <td>Font size as percentage (50-200%)</td>
                            <td>100</td>
                            <td>50, 75, 100, 120, 150, 200</td>
                        </tr>
                        <tr>
                            <td><code>no-shadow</code></td>
                            <td>Disable text shadow/glow effect</td>
                            <td>false</td>
                            <td>true, false</td>
                        </tr>
                    </tbody>
                </table>
                
                <h3>Example URLs</h3>
                <div class="code-block"><!-- Basic timer -->
/?background=%23000000&font-color=%23ffffff

<!-- Red on black, no seconds -->
/?background=%23000000&font-color=%23ff0000&show-seconds=false

<!-- Blue theme with auto-hide hours -->
/?background=%232d3748&font-color=%2363b3ed&hide-hour-auto=on

<!-- Hide seconds when timer > 1 hour -->
/?background=%23000000&font-color=%2300ff00&hide-seconds-over-hour=true

<!-- Timer positioned in top-left corner -->
/?position=top-left&background=%23000000&font-color=%2300ff00

<!-- Timer in bottom-right with red text -->
/?position=bottom-right&font-color=%23ff0000&show-seconds=false

<!-- Custom warning colors (orange for 5min, red for 1min) -->
/?warning-color-1=%23ff8800&warning-color-2=%23ff0000&background=%23000000&font-color=%2300ff00

<!-- Timer without shadow/glow effect -->
/?no-shadow=true&background=%23ffffff&font-color=%23000000

<!-- Large font size (150%) -->
/?font-size=150&background=%23000000&font-color=%2300ff00

<!-- Small font size (75%) for overlay -->
/?font-size=75&transparent-bg=true&font-color=%23ffffff

<!-- Transparent background for overlay use -->
/?transparent-bg=true&font-color=%23ffffff&no-shadow=true</div>
                
                <div class="alert alert-warning">
                    <strong>Note:</strong> URL encode color values (# becomes %23). The URL builder below handles this automatically.
                </div>
            </div>
        </div>
        
        <!-- URL Builder Tab -->
        <div id="builder" class="tab-content">
            <div class="section">
                <h2>Timer URL Builder</h2>
                <p>Use this tool to generate custom timer URLs with your preferred settings:</p>
                
                <div class="url-builder">
                    <div class="form-group">
                        <label>Background Color</label>
                        <div class="color-input-group">
                            <input type="color" id="bgColor" value="#000000">
                            <input type="text" id="bgColorText" value="#000000" placeholder="#000000">
                        </div>
                        <div class="checkbox-group" style="margin-top: 10px;">
                            <input type="checkbox" id="transparentBg">
                            <label for="transparentBg">Use transparent background (overrides color)</label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Font Color</label>
                        <div class="color-input-group">
                            <input type="color" id="fontColor" value="#00ff00">
                            <input type="text" id="fontColorText" value="#00ff00" placeholder="#00ff00">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Warning Color 1 (Last 5 Minutes)</label>
                        <div class="color-input-group">
                            <input type="color" id="warningColor1" value="#ff8800">
                            <input type="text" id="warningColor1Text" value="#ff8800" placeholder="#ff8800">
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Warning Color 2 (Last Minute)</label>
                        <div class="color-input-group">
                            <input type="color" id="warningColor2" value="#ff4444">
                            <input type="text" id="warningColor2Text" value="#ff4444" placeholder="#ff4444">
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Font Size</label>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <button type="button" id="decreaseFontSize" style="background: #ef4444; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-weight: bold;">−</button>
                            <input type="range" id="fontSize" min="50" max="200" value="100" style="flex: 1;">
                            <button type="button" id="increaseFontSize" style="background: #10b981; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer; font-weight: bold;">+</button>
                            <span id="fontSizeValue" style="min-width: 50px; text-align: center; font-weight: bold;">100%</span>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Timer Position</label>
                        <select id="position">
                            <option value="center">Center</option>
                            <option value="top-left">Top Left</option>
                            <option value="top-right">Top Right</option>
                            <option value="bottom-left">Bottom Left</option>
                            <option value="bottom-right">Bottom Right</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Display Options</label>
                        <div class="checkbox-group">
                            <input type="checkbox" id="showSeconds" checked>
                            <label for="showSeconds">Show seconds</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="hideHourAuto">
                            <label for="hideHourAuto">Auto-hide hours when zero</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="hideSecondsOverHour">
                            <label for="hideSecondsOverHour">Hide seconds when timer > 1 hour</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="noShadow">
                            <label for="noShadow">Disable text shadow/glow</label>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label>Generated URL</label>
                        <div class="generated-url">
                            <span id="generatedUrl">/?background=%23000000&font-color=%2300ff00&warning-color-1=%23ff8800&warning-color-2=%23ff4444&show-seconds=true&hide-hour-auto=off&position=center</span>
                            <button class="copy-button" onclick="copyUrl()">Copy</button>
                        </div>
                        <button class="preview-button" onclick="previewTimer()">Preview Timer</button>
                    </div>
                </div>
                
                <h3>Preset Themes</h3>
                <div class="quick-links">
                    <a href="#" class="quick-link" onclick="applyPreset('classic')">
                        Classic Green<br>
                        <small>Black bg, green text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('matrix')">
                        Matrix Style<br>
                        <small>Dark green bg, bright green text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('modern')">
                        Modern Blue<br>
                        <small>Dark bg, blue text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('minimal')">
                        Minimal White<br>
                        <small>White bg, dark text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('red')">
                        Warning Red<br>
                        <small>Black bg, red text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('purple')">
                        Purple Glow<br>
                        <small>Dark bg, purple text</small>
                    </a>
                    <a href="#" class="quick-link" onclick="applyPreset('overlay')">
                        Transparent Overlay<br>
                        <small>Transparent bg, white text</small>
                    </a>
                </div>
            </div>
        </div>
        
        <!-- API Reference Tab -->
        <div id="api" class="tab-content">
            <div class="section">
                <h2>API Endpoints</h2>
                
                <div class="endpoint-section">
                    <div class="endpoint-title">
                        <span class="method-badge method-get">GET</span>
                        /api/status
                    </div>
                    <p>Get current timer status (public access - no authentication required)</p>
                    
                    <h4>Example Request:</h4>
                    <div class="code-block"><span class="api-example">curl -X GET http://<span id="hostname1"></span>/api/status</span><button class="copy-api-button" onclick="copyApiExample(this)">Copy</button></div>
                    
                    <h4>Example Response:</h4>
                    <div class="code-block">{
  "running": true,
  "paused": false,
  "remaining": 300.5,
  "finished": false,
  "total": 600
}</div>
                    
                    <h4>Response Fields:</h4>
                    <ul>
                        <li><strong>running:</strong> Whether the timer is currently running</li>
                        <li><strong>paused:</strong> Whether the timer is paused</li>
                        <li><strong>remaining:</strong> Seconds remaining (decimal precision)</li>
                        <li><strong>finished:</strong> Whether the timer has reached zero</li>
                        <li><strong>total:</strong> Total timer duration in seconds</li>
                    </ul>
                </div>
                
                <div class="endpoint-section">
                    <div class="endpoint-title">
                        <span class="method-badge method-post">POST</span>
                        /api/start
                    </div>
                    <p>Start timer with specified duration (requires IP whitelist access)</p>
                    
                    <h4>Example Request:</h4>
                    <div class="code-block"><span class="api-example">curl -X POST http://<span id="hostname2"></span>/api/start -H "Content-Type: application/json" -d '{"hours": 0, "minutes": 5, "seconds": 30}'</span><button class="copy-api-button" onclick="copyApiExample(this)">Copy</button></div>
                    
                    <h4>Request Body Fields:</h4>
                    <ul>
                        <li><strong>hours:</strong> Hours (0-23)</li>
                        <li><strong>minutes:</strong> Minutes (0-59)</li>
                        <li><strong>seconds:</strong> Seconds (0-59)</li>
                    </ul>
                    
                    <h4>Success Response:</h4>
                    <div class="code-block">{"success": true}</div>
                    
                    <h4>Error Response (403 Forbidden):</h4>
                    <div class="code-block">{"error": "Access denied"}</div>
                </div>
                
                <div class="endpoint-section">
                    <div class="endpoint-title">
                        <span class="method-badge method-post">POST</span>
                        /api/pause
                    </div>
                    <p>Pause or resume the timer (requires IP whitelist access)</p>
                    
                    <h4>Example Request:</h4>
                    <div class="code-block"><span class="api-example">curl -X POST http://<span id="hostname3"></span>/api/pause</span><button class="copy-api-button" onclick="copyApiExample(this)">Copy</button></div>
                    
                    <h4>Success Response:</h4>
                    <div class="code-block">{"success": true}</div>
                </div>
                
                <div class="endpoint-section">
                    <div class="endpoint-title">
                        <span class="method-badge method-post">POST</span>
                        /api/reset
                    </div>
                    <p>Reset timer to zero (requires IP whitelist access)</p>
                    
                    <h4>Example Request:</h4>
                    <div class="code-block"><span class="api-example">curl -X POST http://<span id="hostname4"></span>/api/reset</span><button class="copy-api-button" onclick="copyApiExample(this)">Copy</button></div>
                    
                    <h4>Success Response:</h4>
                    <div class="code-block">{"success": true}</div>
                </div>
                
                <div class="endpoint-section">
                    <div class="endpoint-title">
                        <span class="method-badge method-get">GET</span>
                        /api/whitelist
                    </div>
                    <p>Check whitelist status and view configuration (requires IP whitelist access)</p>
                    
                    <h4>Example Request:</h4>
                    <div class="code-block"><span class="api-example">curl -X GET http://<span id="hostname5"></span>/api/whitelist</span><button class="copy-api-button" onclick="copyApiExample(this)">Copy</button></div>
                    
                    <h4>Example Response:</h4>
                    <div class="code-block">{
  "whitelist": [
    "127.0.0.1",
    "192.168.1.0/24",
    "10.0.0.100"
  ],
  "your_ip": "192.168.1.100",
  "access": "granted"
}</div>
                </div>
                
            </div>
        </div>
        
        <!-- Setup Guide Tab -->
        <div id="setup" class="tab-content">
            <div class="section">
                <h2>Setup & Configuration</h2>
                
                <h3>Installation</h3>
                <div class="code-block"># Install Node.js dependencies
npm install

# Start the server
npm start

# For development with auto-restart
npm run dev

# Server will start on http://0.0.0.0:80
# Access timer display: http://your-server/
# Access control panel: http://your-server/control</div>
                
                <h3>IP Whitelist Configuration</h3>
                <p>Control access is restricted to whitelisted IPs. Configure using either method:</p>
                
                <h4>Method 1: Code Configuration</h4>
                <p>Edit the <code>CONTROL_WHITELIST</code> array in <code>server.js</code>:</p>
                <div class="code-block">let CONTROL_WHITELIST = [
    '127.0.0.1',       // localhost
    '::1',             // localhost IPv6
    '192.168.1.0/24',  // home network
    '10.0.0.100',      // specific office IP
];</div>
                
                <h4>Method 2: JSON File</h4>
                <p>Create <code>control_whitelist.json</code> in the same directory:</p>
                <div class="code-block">[
    "127.0.0.1",
    "192.168.1.0/24",
    "10.0.0.0/16"
]</div>
                
                <h3>Supported IP Formats</h3>
                <ul>
                    <li><strong>Single IPv4:</strong> <code>192.168.1.100</code></li>
                    <li><strong>IPv4 Subnet:</strong> <code>192.168.1.0/24</code> (256 addresses)</li>
                    <li><strong>Large Subnet:</strong> <code>10.0.0.0/16</code> (65,536 addresses)</li>
                    <li><strong>IPv6:</strong> <code>::1</code> or <code>2001:db8::/32</code></li>
                </ul>
                
                <h3>File Structure</h3>
                <div class="code-block">timer/
├── server.js                # Main Node.js server file
├── package.json             # Node.js dependencies
├── control_whitelist.json   # IP whitelist (optional)
├── views/                   # EJS templates
│   ├── timer.ejs           # Timer display template
│   ├── control.ejs         # Control panel template
│   └── help.ejs            # This help page template
└── static/                  # Static assets
    ├── css_timer.css
    ├── css_control.css
    └── ...</div>
                
                <h3>Production Deployment</h3>
                <p>For production use, consider:</p>
                <ul>
                    <li>Use a process manager like PM2 for automatic restarts</li>
                    <li>Put the application behind a reverse proxy like Nginx</li>
                    <li>Enable HTTPS for secure connections</li>
                    <li>Configure proper firewall rules</li>
                    <li>Set up monitoring and logging</li>
                </ul>
                
                <h4>Example PM2 Usage:</h4>
                <div class="code-block">npm install pm2 -g
pm2 start server.js --name "timer-app"
pm2 save
pm2 startup</div>
                
                <div class="alert alert-info">
                    <strong>Security Note:</strong> The timer display (/) is publicly accessible, but control functions (/control, /api/start, /api/pause, /api/reset) require whitelisted IP addresses.
                </div>
            </div>
        </div>
    </div>

    <script>
        function showTab(tabName) {
            // Hide all tab contents
            const contents = document.querySelectorAll('.tab-content');
            contents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.nav-tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked tab
            event.target.classList.add('active');
        }
        
        function updateUrl() {
            const bgColor = encodeURIComponent(document.getElementById('bgColorText').value || '#000000');
            const transparentBg = document.getElementById('transparentBg').checked;
            const fontColor = encodeURIComponent(document.getElementById('fontColorText').value || '#00ff00');
            const warningColor1 = encodeURIComponent(document.getElementById('warningColor1Text').value || '#ff8800');
            const warningColor2 = encodeURIComponent(document.getElementById('warningColor2Text').value || '#ff4444');
            const showSeconds = document.getElementById('showSeconds').checked ? 'true' : 'false';
            const hideHourAuto = document.getElementById('hideHourAuto').checked ? 'on' : 'off';
            const hideSecondsOverHour = document.getElementById('hideSecondsOverHour').checked ? 'true' : 'false';
            const noShadow = document.getElementById('noShadow').checked ? 'true' : 'false';
            const fontSize = document.getElementById('fontSize').value || '100';
            const position = document.getElementById('position').value || 'center';

            let url = `/?font-color=${fontColor}&warning-color-1=${warningColor1}&warning-color-2=${warningColor2}&show-seconds=${showSeconds}&hide-hour-auto=${hideHourAuto}&position=${position}`;

            if (hideSecondsOverHour === 'true') {
                url += `&hide-seconds-over-hour=${hideSecondsOverHour}`;
            }

            if (fontSize !== '100') {
                url += `&font-size=${fontSize}`;
            }

            if (transparentBg) {
                url += `&transparent-bg=true`;
            } else {
                url = `/?background=${bgColor}&` + url.substring(2); // Remove /? and add background
            }

            if (noShadow === 'true') {
                url += `&no-shadow=${noShadow}`;
            }
            document.getElementById('generatedUrl').textContent = url;
        }
        
        function copyUrl() {
            const urlText = document.getElementById('generatedUrl').textContent;
            const fullUrl = window.location.origin + urlText;

            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(fullUrl).then(() => {
                    showCopied();
                }).catch(err => {
                    console.error('Clipboard error:', err);
                });
            } else {
                // Fallback for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = fullUrl;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                showCopied();
            }
        }

        function showCopied() {
            const button = document.querySelector('.copy-button');
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            setTimeout(() => button.textContent = originalText, 2000);
        }
        
        function previewTimer() {
            const url = document.getElementById('generatedUrl').textContent;
            window.open(url, '_blank');
        }
        
        function applyPreset(preset) {
            const presets = {
                classic: { bg: '#000000', font: '#00ff00', warning1: '#ff8800', warning2: '#ff4444', seconds: true, hideHour: false, hideSecondsOverHour: false, noShadow: false, transparentBg: false, fontSize: 100, position: 'center' },
                matrix: { bg: '#001100', font: '#00ff41', warning1: '#ff8800', warning2: '#ff0000', seconds: true, hideHour: false, hideSecondsOverHour: false, noShadow: false, transparentBg: false, fontSize: 100, position: 'center' },
                modern: { bg: '#2d3748', font: '#63b3ed', warning1: '#ffa500', warning2: '#f56565', seconds: true, hideHour: true, hideSecondsOverHour: true, noShadow: false, transparentBg: false, fontSize: 100, position: 'center' },
                minimal: { bg: '#ffffff', font: '#2d3748', warning1: '#f6ad55', warning2: '#e53e3e', seconds: false, hideHour: true, hideSecondsOverHour: false, noShadow: true, transparentBg: false, fontSize: 80, position: 'center' },
                red: { bg: '#000000', font: '#ff4444', warning1: '#ff6600', warning2: '#ff0000', seconds: true, hideHour: false, hideSecondsOverHour: false, noShadow: false, transparentBg: false, fontSize: 130, position: 'center' },
                purple: { bg: '#1a1625', font: '#9f7aea', warning1: '#d69e2e', warning2: '#ed64a6', seconds: true, hideHour: false, hideSecondsOverHour: true, noShadow: false, transparentBg: false, fontSize: 100, position: 'center' },
                overlay: { bg: '#000000', font: '#ffffff', warning1: '#ffaa00', warning2: '#ff4444', seconds: true, hideHour: false, hideSecondsOverHour: true, noShadow: true, transparentBg: true, fontSize: 100, position: 'center' }
            };

            const p = presets[preset];
            document.getElementById('bgColor').value = p.bg;
            document.getElementById('bgColorText').value = p.bg;
            document.getElementById('fontColor').value = p.font;
            document.getElementById('fontColorText').value = p.font;
            document.getElementById('warningColor1').value = p.warning1;
            document.getElementById('warningColor1Text').value = p.warning1;
            document.getElementById('warningColor2').value = p.warning2;
            document.getElementById('warningColor2Text').value = p.warning2;
            document.getElementById('showSeconds').checked = p.seconds;
            document.getElementById('hideHourAuto').checked = p.hideHour;
            document.getElementById('hideSecondsOverHour').checked = p.hideSecondsOverHour;
            document.getElementById('noShadow').checked = p.noShadow;
            document.getElementById('transparentBg').checked = p.transparentBg;
            document.getElementById('fontSize').value = p.fontSize;
            document.getElementById('fontSizeValue').textContent = p.fontSize + '%';
            document.getElementById('position').value = p.position;

            updateUrl();
        }
        
        // Event listeners for URL builder
        document.getElementById('bgColor').addEventListener('input', (e) => {
            document.getElementById('bgColorText').value = e.target.value;
            updateUrl();
        });
        
        document.getElementById('bgColorText').addEventListener('input', (e) => {
            if (e.target.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                document.getElementById('bgColor').value = e.target.value;
            }
            updateUrl();
        });
        
        document.getElementById('fontColor').addEventListener('input', (e) => {
            document.getElementById('fontColorText').value = e.target.value;
            updateUrl();
        });
        
        document.getElementById('fontColorText').addEventListener('input', (e) => {
            if (e.target.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                document.getElementById('fontColor').value = e.target.value;
            }
            updateUrl();
        });
        
        document.getElementById('warningColor1').addEventListener('input', (e) => {
            document.getElementById('warningColor1Text').value = e.target.value;
            updateUrl();
        });

        document.getElementById('warningColor1Text').addEventListener('input', (e) => {
            if (e.target.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                document.getElementById('warningColor1').value = e.target.value;
            }
            updateUrl();
        });

        document.getElementById('warningColor2').addEventListener('input', (e) => {
            document.getElementById('warningColor2Text').value = e.target.value;
            updateUrl();
        });

        document.getElementById('warningColor2Text').addEventListener('input', (e) => {
            if (e.target.value.match(/^#[0-9A-Fa-f]{6}$/)) {
                document.getElementById('warningColor2').value = e.target.value;
            }
            updateUrl();
        });
        
        document.getElementById('showSeconds').addEventListener('change', updateUrl);
        document.getElementById('hideHourAuto').addEventListener('change', updateUrl);
        document.getElementById('hideSecondsOverHour').addEventListener('change', updateUrl);
        document.getElementById('noShadow').addEventListener('change', updateUrl);
        document.getElementById('transparentBg').addEventListener('change', updateUrl);
        document.getElementById('fontSize').addEventListener('input', function() {
            document.getElementById('fontSizeValue').textContent = this.value + '%';
            updateUrl();
        });

        document.getElementById('increaseFontSize').addEventListener('click', function() {
            const slider = document.getElementById('fontSize');
            const currentValue = parseInt(slider.value);
            const newValue = Math.min(200, currentValue + 10);
            slider.value = newValue;
            document.getElementById('fontSizeValue').textContent = newValue + '%';
            updateUrl();
        });

        document.getElementById('decreaseFontSize').addEventListener('click', function() {
            const slider = document.getElementById('fontSize');
            const currentValue = parseInt(slider.value);
            const newValue = Math.max(50, currentValue - 10);
            slider.value = newValue;
            document.getElementById('fontSizeValue').textContent = newValue + '%';
            updateUrl();
        });
        document.getElementById('position').addEventListener('change', updateUrl);
        
        // Initialize URL on page load
        updateUrl();
        
        // Set hostname in all API examples
        function setHostnames() {
            const hostname = window.location.host;
            for (let i = 1; i <= 5; i++) {
                const element = document.getElementById(`hostname${i}`);
                if (element) {
                    element.textContent = hostname;
                }
            }
        }
        
        // Copy API example
        function copyApiExample(button) {
            const codeBlock = button.parentElement;
            const apiExample = codeBlock.querySelector('.api-example');
            const text = apiExample.textContent;
            
            if (navigator.clipboard && navigator.clipboard.writeText) {
                navigator.clipboard.writeText(text).then(() => {
                    showApiCopied(button);
                }).catch(err => {
                    console.error('Clipboard error:', err);
                });
            } else {
                // Fallback for older browsers
                const textarea = document.createElement('textarea');
                textarea.value = text;
                document.body.appendChild(textarea);
                textarea.select();
                document.execCommand('copy');
                document.body.removeChild(textarea);
                showApiCopied(button);
            }
        }
        
        function showApiCopied(button) {
            const originalText = button.textContent;
            button.textContent = 'Copied!';
            button.style.background = '#059669';
            setTimeout(() => {
                button.textContent = originalText;
                button.style.background = '';
            }, 2000);
        }
        
        // Set hostnames on page load
        setHostnames();
    </script>
</body>
</html>